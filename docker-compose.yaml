version: '3.8'

services:
  app:
    build: .
    container_name: stock-analysis-app
    volumes:
      - ./src:/app/src
      - ./config:/app/config
      - ./data:/app/data
    ports:
      - "8000:8000"
    environment:
      - API_KEY=test_key
      - LOG_LEVEL=INFO
    command: python main.py

  # Lightweight Kafka setup for development
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    profiles:
      - streaming

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/bitnami/kafka
    profiles:
      - streaming

  # Lightweight database for development
  postgres:
    image: postgres:13-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_password
      - POSTGRES_DB=stockdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    profiles:
      - database

  # Simple MLflow tracking server
  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    container_name: mlflow
    ports:
      - "5000:5000"
    command: mlflow server --host 0.0.0.0
    volumes:
      - mlflow_data:/mlflow
    profiles:
      - ml

volumes:
  zookeeper_data:
  kafka_data:
  postgres_data:
  mlflow_data:

# Usage instructions:
# - Run just the app: docker-compose up
# - Run with Kafka: docker-compose --profile streaming up
# - Run with database: docker-compose --profile database up
# - Run with MLflow: docker-compose --profile ml up
# - Run everything: docker-compose --profile streaming --profile database --profile ml up